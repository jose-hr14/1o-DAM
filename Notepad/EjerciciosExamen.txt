calculadora con clases
suma multiplicacion resta y division, vigialr que divisor
no sea cero

class tclaculadora
{
	float a;
	float b;
	
	public float Suma()
	{return a+b;}
	
	public float Resta()
	{return a-b;}
	
	
}

hacer una clase banco con los atributos nombre, direccion, telefono, lista<tcliente> cliente, y una clase
tcliente con nombre, dni, telefono y saldo. Unir y saber saldo del banco completo, y cada vez que demos de alta
el banco, el saldo del cliente debera inicializarse a cero, y luego averiguar el saldo del banco en cualquier
momento, cada

class tBanco
{
	string nombre;
	string direccion;
	string telefono;
	List<tCliente> listaClientes;
	
	pubic tBanco(string nombre, string direccion, string telefono)
	{
		this.nombre = nombre;
		this.direccion = direccion;
		this.telefono = telefono;
		this.listaClientes = new List<tCliente>();
	}
	
	public void AñadirCliente(tCliente nuevoCliente)
	{
		this.listaClientes.Add(nuevoCliente);
	}
	
	public float SaldoTotal()
	{
		float saldoTotal = 0;
		for (int i = 0; i < this.listaClientes.Count; i++)
		{
			saldoTotal += listaClientes[i].GetSaldo();
		}
		return saldoTotal;
	}
	
}

class tCliente
{
	string nombre;
	string dni;
	string telefono;
	float saldo;
	
	public tCliente(string nombre, string dni, string telefono)
	{
		this.nombre = nombre;
		this.dni = dni;
		this.telefono = telefono;
		this.saldo = 0;		
	}
	
	public float GetSaldo()
	{
		return this.Saldo;
	}
}

biblioteca guarda datos de clientes y libros, completar este programa y dado un isbn, devuelve el cliente, y constructores.
class tBiblioteca
{
	string nombre;
	string direccion;
	string telefono;
	List<tLibro> listaLibros;
	List<tCliente> listaClientes;
	
	public tBiblioteca(string nombre, string direccion, string telefono)
	{
		this.nombre = nombre;
		this.direccion = direccion;
		this.telefono = telefono;
		listaLibros = new List<tLibro>();
		listaClientes = new List<tCliente>();
	}
	
	public tCliente BuscarCliente(string ISBN)
	{
		int indice = listaClientes.IndexOf(ISBN);
		return listaClientes[indice];
	}
	
}

class tLibros
{
	string ISBN;
	string título;
}

class tUsuario
{
	string nombre;
	string DNI;
	string ISBN;
}
Y dado este ejercicio anterior,modificarlo para que un usuario tenga varios libros.
class tBiblioteca
{
	string nombre;
	string direccion;
	string telefono;
	List<tLibro> listaLibros;
	List<tCliente> listaClientes;
	
	public tBiblioteca(string nombre, string direccion, string telefono)
	{
		this.nombre = nombre;
		this.direccion = direccion;
		this.telefono = telefono;
		listaLibros = new List<tLibro>();
		listaClientes = new List<tCliente>();
	}
	
	public tCliente BuscarCliente(string ISBN)
	{
		int indice = listaClientes.IndexOf(ISBN);
		return listaClientes[indice];
	}
	
}

class tLibros
{
	string ISBN;
	string título;
}

class tUsuario
{
	string nombre;
	string DNI;
	List<tLibro> librosAlquilados;
}

//Ejercicio examen de una hora, seguro que es super difícil
class tEmpleado ()
{
	string nombre;
	List<double> ventas;
	int dia_nacimiento;
	int mes_nacimiento;


	public tEmpleado()
	{
		ventas = new List<double>();
	}

}
//1.Crear clase tlistaempleado con atributo que sea una lista de empleados
class tListaEmpleado
{
	List<tEmpleado> listaEmpleados;
	
	public tListaEmpleado()
	{
		listaEmpleados = new List<tEmpleado>();
	}
}
//2. dado un mes y dia, dar empleados que cumplan años ese dia
class tEmpleado ()
{
	string nombre;
	List<double> ventas;
	int dia_nacimiento;
	int mes_nacimiento;
	
	public tEmpleado(string nombre, int dia, int mes)
	{
		this.nombre = nombre;
		this.ventas = new List<double>();
		this.dia_nacimiento = dia;
		this.mes_nacimiento = mes;
	}
	
	public int GetDia()
	{
		return this.dia_nacimiento;
	}
	public int GetMes()
	{
		return this.mes_nacimiento;
	}
	
	public List<double> GetListaVentas()
	{
		return this.ventas;
	}
}

class tListaEmpleado
{
	List<tEmpleado> listaEmpleados;
	
	public tListaEmpleado()
	{
		listaEmpleados = new List<tEmpleado>();
	}
	
	public void ImprimirEmpleadoPorCumpleaños(int dia, int mes)
	{
		for (int i = 0; i < listaEmpleados.Count; i++)
		{
			if (listaEmpleados[i].GetDia() == dia && listaEmpleados[i].GetMes() == mes)
			{
				Console.WriteLine(GetNombre());
			}
		}
	}
}

//3. metodo que imprima el nombre del empleado con mayor numero de ventas

class tListaEmpleado
{
	List<tEmpleado> listaEmpleados;
	
	public tListaEmpleado()
	{
		listaEmpleados = new List<tEmpleado>();
	}
	
	public void ImprimirEmpleadoPorCumpleaños(int dia, int mes)
	{
		for (int i = 0; i < listaEmpleados.Count; i++)
		{
			if (listaEmpleados[i].GetDia() == dia && listaEmpleados[i].GetMes() == mes)
			{
				Console.WriteLine(GetNombre());
			}
		}
	}
	
	public void ImprimirEmpleadoPorMayoresVentas()
	{
		int numVentas = 0;
		tEmpleado = empleado;
		
		for (int i = 0; i < listaEmpleados.Count; i++)
		{
			if (listaEmpleados[i].GetListaVentas().Count > numVentas)
			{
				empleado = listaEmpleados[i];
				numVentas = 0;
			}
				
		}
		Console.WriteLine(empleado.GetNombre());
	}
}


//4. metodo que imprima el nombre de los empleados con un numero de ventas mayor que la media
class tListaEmpleado
{
	List<tEmpleado> listaEmpleados;
	
	public tListaEmpleado()
	{
		listaEmpleados = new List<tEmpleado>();
	}
	
	public void ImprimirEmpleadoPorCumpleaños(int dia, int mes)
	{
		for (int i = 0; i < listaEmpleados.Count; i++)
		{
			if (listaEmpleados[i].GetDia() == dia && listaEmpleados[i].GetMes() == mes)
			{
				Console.WriteLine(GetNombre());
			}
		}
		Console.WriteLine(listaEmpleados[i].GetNombre());
	}
	
	public void ImprimirEmpleadoPorMayoresVentas()
	{		
		int numventas = 0;
		tEmpleado = empleado;
		
		for (int i = 0; i < listaEmpleados.Count; i++)
		{
			if (listaEmpleados[i].GetListaVentas().Count > numVentas)
			{
				empleado = listaEmpleados[i];
				numVentas = listaEmpleados[i].GetListaVentas.Count;
			}
				
		}
		Console.WriteLine(empleado.GetNombre());
	}	
	
	public void ImprimirEmpleadoPorVentasMayorMedia()
	{		
		List<int> numVentasEmpleados = new list<int>();
		double media = 0;
		
		for (int i = 0; i < listaEmpleados.Count; i++) //bucle para meter el numero de ventas en una lista y sacar la media despues
		{
			numVentasEmpleados.Add(listaEmpleados[i].GetListaVentas().Count);			
		}
		
		for (int i = 0; i < numVentasEmpleados.Count; i++)
		{
			media += numVentasEmpleados[i];
		}
		
		media = media / numVentasEmpleados.Count();
		
		for (int i = 0; i < listaEmpleados.Count; i++)
		{
			if (listaEmpleados[i].GetListaVentas().Count > media)
			{
				empleado = listaEmpleados[i];
				numVentas = listaEmpleados[i].GetListaVentas.Count;
			}
				
		}		
		Console.WriteLine(empleado.GetNombre());	
	}
	
	
}
//solucion numero 4
public void EmpleadosMedia()
{
	int aux = 0;
	for(int i = 0; i < ListaEmpleados.Count i++)
	{
		aux += ListaEmpleados[i].GetListaVentas().Count; //el total
	}
	for (int = 0; i < ListaEmpleado.Count;i++)
	{
		if (ListaEmpleados[i].GetListaVentas.Count < aux/ListaEmpleados.Count)
			CWL(ListaEmpleado[i].GetNombre());
	}
}

//5. metodo que ordene los empleados por cumpleaños

class tListaEmpleado
{
	List<tEmpleado> listaEmpleados;
	tEmpleado empleadoAux;
	
	for (int i = 0; i <  listaEmleados.Count; i++)
	{
		for (int j = i + 1; j < listaEmpleados.Count; j++)
		{
			if (listaEmpleados.Count[i].GetMes() > listaEmpleados.Count[j].GetMes())
			{
				empleadoAux = listaEmpleados[i];
				
				listaEmpleados[i] = listaEmpleados[j];
				listaEmpleados[j] = empleadoAux;
				
			}						
		}
	}
}

